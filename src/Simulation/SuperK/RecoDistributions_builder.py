import h5py
import numpy as np

with h5py.File('lib/defaultRecoDistributions.hdf5', 'w') as hf:
	
	# Multi-Ring CC numu PID
	g = hf.create_group('mr_mer_pid_ccmu')
	nbins = 20
	start = -600
	end = 600
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([3.9266805404661085 , 5.520573518385348 , 6.677594834049984 , 8.270722712735846 , 10.44762130648345 , 11.167962234701832 , 12.324983550366483 , 14.064245382626126 , 15.657947085737021, 19.28987314654711, 23.11653380813307, 28.59787914492511 , 33.54003764288227, 36.14558308212575, 33.08155192728496, 28.27060794785085, 23.02298358097046, 18.50354240945051, 13.54703830086764 , 9.755397775091453])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Multi-Ring Rest PID
	g = hf.create_group('mr_mer_pid_rest')
	nbins = 20
	start = -600
	end = 600
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([26.0554543924347 , 30.7178982417836 , 34.8160267249153 , 39.1737741822464 , 41.3770963442409 , 41.9003316487485 , 41.0738613140806 , 36.9811066673891 , 29.4376172785146, 19.689841720742, 15.6209011295012, 8.51227229984455, 3.88311575093503, 0.80787503734444, 0.40481461552215, 0.54052488329998, 0.29054643387246, 0.14556012914874, 0.14498630472370, 0.43648911263790])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Pi0 Delta NC first energy bin
	g = hf.create_group('pi0_delta_0_nc')
	nbins = 40
	start = -200
	end = 400
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([0.00010111733754286645,0.00010111733754286645,0.00010111733754286645,0.00011713555878439808,0.00014739936108981722,0.00009170622969070785,0.0009980699184051756,0.0025706575059013526,0.0025706575059013526,0.0025706575059013526,0.008659903385208112,0.022538776926114418,0.04496241322936234,0.05926808205983623,0.09809161022731588,0.12270724389514823,0.13551774531041838,0.09490964044388187,0.09789001118192589,0.07010347894439668,0.06389363515922251,0.05084842401272453,0.024343938325958686,0.03394821624294675,0.015776479575455887,0.010569499705564228,0.011691755267129983,0.004757657159530526,0.006544748000723327,0.002044853177253836,0.003094404239536802,0.00012233691179563966,0.001269230209232447,0.00048581248591086923,0.00048581248591086923,0.00048581248591086923,0.0005047636209008499,0.0005047636209008499,0.0014323775652175796,0.006969235274968122])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Pi0 Delta CC first energy bin
	g = hf.create_group('pi0_delta_0_cc')
	nbins = 40
	start = -200
	end = 400
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([0.00038601707519952955,0.0001727716848123062,0.000025674779890072497,0.000025674779890072497,0.000025674779890072497,0.000025674779890072497,0.0020692098474755782,0.005690050300214439,0.013584379255497797,0.04903481392230606,0.07642537062198787,0.10962429979026471,0.15846156266672992,0.12167707123805754,0.1547823351736756,0.12428223187511737,0.04554427054706861,0.05849782253021843,0.018299848154976206,0.027355862023153626,0.0019186413406501734,0.009599295870806324,0.000026570912969203775,0.0018809992139438292,0.0018809992139438292,0.007251471821068889,0.001846124890671763,0.001846124890671763,0.001846124890671763,0.00022110835947419805,0.00022110835947419805,0.0002494550905894066,0.001788554579238516,0.00020479709193249596,0.00020479709193249596,0.0002975774369389783,0.0002975774369389783,0.00016344981215277166,0.0017188059326943839,0.0017188059326943839])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Pi0 Delta NC second energy bin
	g = hf.create_group('pi0_delta_1_nc')
	nbins = 40
	start = -200
	end = 400
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([0.00022487785445790553,0.00024153365210979882,0.00024153365210979882,0.00024153365210979882,0.00024153365210979882,0.00024153365210979882,0.00024153365210979882,0.00024153365210979882,0.0000734483078540793,0.009569982380878889,0.023558495319713546,0.05083627985609285,0.08376276969703216,0.09614228870081538,0.0947622336532415,0.1119321286092756,0.06626738276619212,0.0850353582731143,0.06350495325079632,0.07110105456307275,0.042392817013205214,0.02844382364159287,0.039829084499056755,0.02827682538373516,0.022903501809147797,0.011983325310092718,0.011438603992848406,0.011438603992848406,0.009798777407815928,0.006025080664281951,0.0002543630871998659,0.0002543630871998659,0.0002543630871998659,0.0029568760113484194,0.004706876823321993,0.0063150081952848824,0.0029387054542455715,0.004746306967538388,0.0036813806403746263,0.0059989739477916415])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Pi0 Delta CC second energy bin
	g = hf.create_group('pi0_delta_1_cc')
	nbins = 40
	start = -200
	end = 400
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([0.00018246105951116864,0.0002813450708875065,0.00014928355332641252,0.00014928355332641252,0.0006788169925881771,0.0034853154926964003,0.004702101182925494,0.01613098002672031,0.06114442419139078,0.08985604025751,0.14866836345186,0.120280495221994,0.11812214758968811,0.07411178266427414,0.06068144566886924,0.033816211841846106,0.03199099034090322,0.02781758017462657,0.013460244689774997,0.015878751017967763,0.008569395616017772,0.009184835340932174,0.0021523464092235434,0.002972723617883255,0.001989289432721364,0.0030013298009421985,0.0003741998000144353,0.0010391002711144515,0.001063840753760037,0.001063840753760037,0.001063840753760037,0.0001209299887346693,0.00005285418606282288,0.00007370778637494357,0.00007370778637494357,0.00007370778637494357,0.0001834907896710869,0.0001834907896710869,0.0011751729256651577,0.0021856670137206657])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Pi0 Delta NC third energy bin
	g = hf.create_group('pi0_delta_2_nc')
	nbins = 40
	start = -200
	end = 400
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([0.00042884275885224366,0.00042884275885224366,0.00042884275885224366,0.0004223314439914805,0.0004223314439914805,0.00037954935409642565,0.00040230620301626163,0.0006230554982809278,0.003932198729308223,0.009867287219718857,0.01334174101933469,0.026136323922337515,0.035419770927957214,0.06324134206719476,0.07610031768494636,0.09314579107049892,0.07070736764626681,0.06878915857314688,0.04563032938321421,0.06750593232068938,0.0743411485916378,0.03607592948315172,0.061289562501122025,0.04322005766558566,0.036231811918428766,0.028217071139770386,0.0318847279320683,0.02805504191874765,0.02092010304651455,0.019002567186686525,0.009606753675744595,0.0151674954670305,0.01881563829596252,0.012052244795651368,0.013763172540078611,0.004604750738116364,0.004604750738116364,0.002968646212950815,0.0025732388432880005,0.017219673985243156])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Pi0 Delta CC third energy bin
	g = hf.create_group('pi0_delta_2_cc')
	nbins = 40
	start = -200
	end = 400
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([0.0005168034037664193,0.0005071540132488561,0.0005071540132488561,0.0005071540132488561,0.0005071540132488561,0.0005071540132488561,0.0004984022404538602,0.0027498518930757776,0.00744102651562753,0.022915282839344367,0.053693248119490875,0.08134144480548625,0.09351089707915194,0.12115864495628603,0.1303720176651168,0.10671552699136494,0.10062429312604348,0.08044562231836708,0.0486156490673752,0.03434958619822990,0.02704073389224998,0.024080839452094147,0.010858930398721794,0.006506830870868702,0.008415390553471097,0.010497639265389658,0.009276654758271552,0.004576055149632857,0.007355079618691973,0.0014373103782560903,0.003345645656427837,0.0016020232303466664,0.0016020232303466664,0.003163204854316648,0.003331956986158735,0.0007205626267884901,0.001582948853742161,0.001582948853742161,0.0003565786402886794,0.001566791734736006])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Pi0 Delta NC fourth energy bin
	g = hf.create_group('pi0_delta_3_nc')
	nbins = 40
	start = -200
	end = 400
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([0.00008328520267597561,0.00000191946414471178,0.00000191946414471178,0.00000191946414471178,0.00000191946414471178,0.00000191946414471178,0.00001668079896671726,0.000032376395486310994,0.000017241355985297968,0.000028724319536405085,0.00008458836726063512,0.003703324170762662,0.010375406851657748,0.020544519057252922,0.05428734300582924,0.05093277063680329,0.05448180430665123,0.06440162924550855,0.03060581820856549,0.07757576096168521,0.09823375811404719,0.05116125117228443,0.05117366359574116,0.058083705706037034,0.034374597745536126,0.047835641124657505,0.03064775852100532,0.044136279215167065,0.04096007796840809,0.021078676509555194,0.03425139294974347,0.027534892701494992,0.01751530896875697,0.01392535996028027,0.010392876188374617,0.007393207186333434,0.0003064887775607872,0.00687832147257314,0.007068185579522268,0.03751677975763594])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Pi0 Delta CC fourth energy bin
	g = hf.create_group('pi0_delta_3_cc')
	nbins = 40
	start = -200
	end = 400
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([0.000010514671762607009,0.000010514671762607009,0.000010514671762607009,0.000010514671762607009,0.000010514671762607009,0.000010514671762607009,0.000010514671762607009,0.000010514671762607009,0.001843934462404162,0.006632831319762389,0.013530651686456424,0.04641435892962362,0.0678333593914057,0.08834470125743149,0.11009697622328826,0.1310723580889955,0.08667150862666563,0.12116283111494165,0.05798668487305757,0.04020782490707364,0.04336670896085029,0.03650352398919314,0.03169207624657734,0.01898929364905308,0.02023036688813866,0.01013681248965631,0.008553079200456032,0.003718701268976249,0.010163016494731614,0.003446056527095842,0.00681809823283866,0.010190139938581477,0.005243559331384123,0.002065519207076011,0.0034906493076625744,0.00021698755079899157,0.005277578566043273,0.001923465916404632,0.0037017328116711046,0.008490557363785178])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Pi0 Signal NC first energy bin
	g = hf.create_group('pi0_signal_0_nc')
	nbins = 30
	start = 0.
	end = 0.7
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([0.0008570117426898727,0.02165294805234652,0.14153626407245465,0.2078420348963103,0.15813714174465657,0.13690613595774143,0.12119802851540692,0.07021894127065798,0.052386779689973906,0.03246684981267117,0.011904013137979008,0.005241868928082261,0.009099343037127228,0.005289276228353734,0.007004491663306023,0.0014929168396649595,0.0006579606790284576,0.002112231965105682,0.0001923098513849086,0.0006570121610761648,0.0001798729223732587,0.00008498574652765489,0.000275003771711968,0.0006679001137428475,0.0006263070434407436,0.00029511200830112383,0.0006207564011654898,0.00044969207267042677,0.00044969207267042677,0.00044969207267042677])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Pi0 Signal CC first energy bin
	g = hf.create_group('pi0_signal_0_cc')
	nbins = 30
	start = 0.
	end = 0.7
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([0.003405399928880337,0.1487439831378867,0.28176257556463646,0.2919746035277734,0.12711784606765902,0.0761381628481238,0.0213376852736617,0.01157859814810774,0.002244441045180845,0.009481362875141286,0.0001460138226418994,0.0027122812524212336,0.0010250766324245708,0.0014655019994954666,0.003601475633570883,0.0036205468267322405,0.0019291703832317042,0.0015250994781247917,0.00016210514187170455,0.0015483424947902447,0.0019911517610061713,0.000549488752962457,0.0005280336606559022,0.0005083664927082454,0.0004797597029661538,0.0004010910311754712,0.0004010910311754712,0.0004010910311754712,0.0004010910311754712,0.0004010910311754712])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Pi0 Signal NC second energy bin
	g = hf.create_group('pi0_signal_1_nc')
	nbins = 30
	start = 0.
	end = 0.7
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([0.00542566393066124,0.046318588992999454,0.1270134462802834,0.15312791783380017,0.14334060987849967,0.10297078904994722,0.08419626950347003,0.0829318293232037,0.06665440697759514,0.04526132514197303,0.04153654393807962,0.034702769996887595,0.019899231834440645,0.01755896807256302,0.013574834120443635,0.007855996491197226,0.0030840626783809055,0.0005552623625940112,0.00211302842245481,0.005861603900819579,0.0009337068160596984,0.004825505081259507,0.0009571622529848667,0.0018489867699814644,0.0011334183599168712,0.0009308673487460339,0.0009465234655515187,0.0009621795823570034,0.0009778356991624881,0.0011355151612748027])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Pi0 Signal CC second energy bin
	g = hf.create_group('pi0_signal_1_cc')
	nbins = 30
	start = 0.
	end = 0.7
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([0.03527923246593323,0.03527923246593323,0.03527923246593323,0.24022968285542878,0.26704917071498485,0.1778183737263021,0.10234554369251725,0.06426248438183646,0.03887693563737893,0.02407429960712143,0.013503114611383982,0.01069477710568928,0.005766428954834757,0.0057804120037709406,0.001911167043306794,0.0047447642503055665,0.003345557224500084,0.004767768621136037,0.0005475942389838173,0.0023193818590238058,0.001981082287987601,0.0002300437083045947,0.002002733460533923,0.0006030753686337431,0.000616607351475229,0.002038367682016373,0.0009936986066567677,0.0010094859199717976,0.0017361533985574829,0.0006950928519555699])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Pi0 Signal NC third energy bin
	g = hf.create_group('pi0_signal_2_nc')
	nbins = 30
	start = 0.
	end = 0.7
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([0.007530255135190539,0.007530255135190539,0.04151264234320384,0.06490164166908646,0.09788527900270795,0.10293690825288308,0.07726041828458746,0.0925506986041423,0.06219921484539267,0.054051798240192794,0.06603581823461482,0.07382040910042473,0.06174003010474047,0.03335235445465656,0.033364847617182475,0.036857868328820015,0.02748293163876525,0.018938309453386537,0.01447838125186418,0.011230444324592359,0.011435633200748196,0.003396913369383553,0.0001129315960572974,0.0020755532445080327,0.00032921171520994275,0.0002045233708639349,0.000272093814583263,0.00026809197566954324,0.0002562077267741769,0.00012778507799671157])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Pi0 Signal CC third energy bin
	g = hf.create_group('pi0_signal_2_cc')
	nbins = 30
	start = 0.
	end = 0.7
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([0.11260425037648311,0.1906291151464401,0.20511544357480024,0.14641074817160876,0.10084345729701984,0.08717897637104013,0.04992335275963827,0.025535348896887466,0.024204320608315705,0.016974156036223403,0.009476232602427026,0.008681059690304582,0.006008873521923808,0.0001478920320635568,0.0009319223938249743,0.0009430649441859174,0.002023892329198168,0.0009602852492892056,0.0001046724427846979,0.00017490427536281938,0.00007597193427921756,0.0007347330177402966,0.0020863581418277544,0.00021778621160042921,0.00022757814979640356,0.0000293758145879508,0.00028396620768364467,0.00028396620768364467,0.00028396620768364467,0.0010669836103213703])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Pi0 Signal NC fourth energy bin
	g = hf.create_group('pi0_signal_3_nc')
	nbins = 30
	start = 0.
	end = 0.7
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([0.047882903429387474,0.04844220923834991,0.11929935635773727,0.07154745192910632,0.0848748366621222,0.08884387123918329,0.06821171825379166,0.0517566702199819,0.05526807639560333,0.0422535115115277,0.06848388062479013,0.042207750778425535,0.054819933896200046,0.02458685125026802,0.035155975031049363,0.024363841949617104,0.01405140642509517,0.027979323346292495,0.014066577125819713,0.017436293170757372,0.010723561514157293,0.004010829857557241,0.0007584844672252344,0.0006174601617398856,0.0006345904113080336,0.0006023526722683248,0.0006558293923224212,0.0006664488828296011,0.0007165121952206199,0.0007165121952206199])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Pi0 Signal CC fourth energy bin
	g = hf.create_group('pi0_signal_3_cc')
	nbins = 30
	start = 0.
	end = 0.7
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([0.18288370747652588,0.16993126661191732,0.1581794350026498,0.13514697374861948,0.1286751528195253,0.08212355423222095,0.054051082783479726,0.023819213793605687,0.01734739286451148,0.01207587777674393,0.010403459728869219,0.007051038282757577,0.0020195236804524397,0.007307726539017012,0.004195002164353312,0.007323200653756051,0.00229016898137846,0.0020616982284666907,0.002073834789046325,0.0004047542953310723,0.0004144635437947908,0.0004259932763454599,0.0006835917746483289,0.0007066512397496671,0.0007066512397496671,0.0007066512397496671,0.0007066512397496671,0.0007066512397496671,0.0007066512397496671,0.0007066512397496671])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Pi0 Distro NC first energy bin
	g = hf.create_group('sgpi0_nc_0')
	nbins = 50
	start = 0.
	end = 200.
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([0.000443307174369 , 0.000443307174369 , 0.000105844443046 , 0.000280779687363 , 0.000645623992223 , 0.000547973824086 , 0.000966790958661 , 0.000785981051201 , 0.000626105362825  , 0.0008911971758  , 0.000826136069423  , 0.000643310881202  , 0.000768402846953  , 0.000776411292161  , 0.000569292010766  , 0.000523037431197  , 0.000758725258301  , 0.00073783200692  , 0.0004205852877  , 0.000672242066606  , 0.000653143505059  , 0.000814226306752  , 0.000979173197292  , 0.001215172423395  , 0.001471667420562  , 0.00277686295532  , 0.003210415899835  , 0.003953325258674  , 0.005743925817159  , 0.009492884416919  , 0.010928311849229  , 0.012190587729453  , 0.01375923055049  , 0.013207141559924  , 0.011679416625551  , 0.008686722959964  , 0.007740855682266  , 0.005520715818195  , 0.003117372153438  , 0.002245390154021  , 0.002040598335319  , 0.001381793839974  , 0.000828898700977  , 0.000461970416347  , 0.000584580653599  , 0.000408170996089  , 0.000238115079886  , 0.000187870268519  , 0.0002478112147  , 0.000187121088391 ])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Pi0 Distro CC first energy bin
	g = hf.create_group('sgpi0_cc_0')
	nbins = 50
	start = 0.
	end = 200.
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([0.016622981792554, 0.009825497921345, 0.004763255068782, 0.005267082110981, 0.00695158714208, 0.009649149406868, 0.011481805823783, 0.011923510194959, 0.011726251146382 , 0.01091047235105 , 0.009568202591663 , 0.008737795464972 , 0.00709258188519 , 0.006197944456937 , 0.005003350763611 , 0.003984339373211 , 0.003052250461477 , 0.002374789614714 , 0.001878593085834 , 0.001577666794142 , 0.000942557667526 , 0.00089558365416 , 0.000721044088484 , 0.000524574616039 , 0.000437810907973 , 0.000395054448549 , 0.00028593224596 , 0.000137954245449 , 8.19151684022489E-05 , 6.58862526804575E-05 , 8.08292410074129E-05 , 8.35511786606707E-05 , 4.07507902104448E-05 , 4.29255820677925E-05 , 3.99163832692923E-05 , 7.47833836061001E-05 , 4.06367634959784E-05 , 3.71528191794764E-05 , 4.76196969807913E-05 , 3.98401270458419E-05 , 6.5047562182223E-05 , 4.05776867404457E-05 , 3.71447607931084E-05 , 3.68402361810433E-05 , 9.21096439434818E-05 , 0.000137090060321 , 0.000121816359867 , 0.000110122807166 , 0.000123879682491 , 8.34208435668907E-05])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Pi0 Distro NC second energy bin
	g = hf.create_group('sgpi0_nc_1')
	nbins = 50
	start = 0.
	end = 200.
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([0.002334779524827, 0.002334779524827, 0.000652193459372, 0.000609037529287, 0.000224524336768, 0.000353188313686, 0.000299940251518, 0.00060184948721, 0.000596040652682 , 0.00081445002417 , 0.001060816032031 , 0.001298308400803 , 0.001583713785033 , 0.001049057822427 , 0.001292354387987 , 0.001608222150686 , 0.001350435899082 , 0.001427067151611 , 0.001222187004166 , 0.001339114615154 , 0.001460041377838 , 0.001614230752066 , 0.001663349094082 , 0.002160603217822 , 0.001865074654837 , 0.002673199836088 , 0.003219735254753 , 0.003936230053175 , 0.004970190660843 , 0.005720065196394 , 0.006251133251312 , 0.007090040778228 , 0.007075383447862 , 0.007722203445329 , 0.007649709407734 , 0.00650759502778 , 0.006221965361796 , 0.00523231387573 , 0.004112586227603 , 0.003183151949205 , 0.002411578151246 , 0.001936388292511 , 0.001449161078564 , 0.001002551212135 , 0.001031118395841 , 0.000574357569878 , 0.000582308977414 , 0.000419955483624 , 0.000439437316814 , 0.000212355257409])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Pi0 Distro CC second energy bin
	g = hf.create_group('sgpi0_cc_1')
	nbins = 50
	start = 0.
	end = 200.
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([0.023943457334529, 0.018035459039276, 0.007388949777165, 0.003878500694993, 0.003189922665113, 0.002925890880512, 0.003568138840748, 0.004316905562605, 0.005230232112909 , 0.005957089692245 , 0.00608767119322 , 0.006080019946511 , 0.005943744616447 , 0.005158890235753 , 0.00502143978352 , 0.004516059390477 , 0.004010342332044 , 0.003542387203889 , 0.003009537634836 , 0.002899595659728 , 0.001780187655602 , 0.001994846808339 , 0.001616172483029 , 0.001459061574416 , 0.001161523933722 , 0.001050610285308 , 0.000897870577558 , 0.00069503990541 , 0.000581379603787 , 0.000462400003158 , 0.000369218503879 , 0.000430236242754 , 0.000349845769431 , 0.000200385839129 , 0.000108057531662 , 0.000160030127047 , 0.000116633937829 , 0.000114014567625 , 8.17022220418392E-05 , 5.26377095645195E-05 , 0.000156000422266 , 5.82258738878946E-05 , 5.94835264089259E-05 , 4.24894295567788E-05 , 5.86274486577172E-05 , 0.00016507043699 , 5.84047172871444E-05 , 6.02832475561678E-05 , 4.2726437614788E-05 , 5.82214783245751E-05])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Pi0 Distro NC third energy bin
	g = hf.create_group('sgpi0_nc_2')
	nbins = 50
	start = 0.
	end = 200.
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([0.010271528751753, 0.006281503954071, 0.002694288258823, 0.001135905307028, 0.000407793346496, 0.000196892866443, 0.000307885408799, 0.000183560909997, 0.000190862137153 , 0.000194571318396 , 0.000201258475714 , 0.000645277428765 , 0.000635272782808 , 0.000798964288419 , 0.001036064189717 , 0.00127103467148 , 0.001403895056972 , 0.001008806157231 , 0.001426090888034 , 0.001598297583178 , 0.001602289558114 , 0.001526405750086 , 0.00169842090797 , 0.001970229275526 , 0.002300745225947 , 0.002518818710524 , 0.00310478024546 , 0.003101489374904 , 0.003381701150846 , 0.003578071661288 , 0.004214300031384 , 0.004584935564245 , 0.004493038984062 , 0.004929884792494 , 0.00415032454517 , 0.004189739076493 , 0.00409023265221 , 0.003587811899181 , 0.003241098736416 , 0.002825482816243 , 0.00258557268032 , 0.002118541795959 , 0.001335147427614 , 0.001289003341249 , 0.001404901920111 , 0.000979104894083 , 0.000581768392854 , 0.000778360490681 , 0.000607128328362 , 0.000390049195537])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Pi0 Distro CC third energy bin
	g = hf.create_group('sgpi0_cc_2')
	nbins = 50
	start = 0.
	end = 200.
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([0.040760659186536, 0.01798926401796, 0.008725635303611, 0.003710201484261, 0.002125275181656, 0.001379857893013, 0.00105166916389, 0.000997028756956, 0.001073726481092 , 0.001394613923462 , 0.00172061756334 , 0.002029494912057 , 0.002260683969382 , 0.002792807894934 , 0.002913034990818 , 0.002792850671709 , 0.002790891383846 , 0.002789397608177 , 0.0025930391011 , 0.002538780531591 , 0.002196292226474 , 0.002058211573286 , 0.001698771163637 , 0.001592184265483 , 0.001446738723111 , 0.002242098231613 , 0.001190224943348 , 0.001002896185484 , 0.000793536784004 , 0.000804267095693 , 0.000329975754072 , 0.000498798286556 , 0.000410782041139 , 0.000397892142651 , 0.000376965356735 , 0.000214077805679 , 0.000199236053414 , 0.000170610116561 , 0.000208435814347 , 0.000199468315204 , 0.000195269866227 , 0.000201487655149 , 0.000154096543618 , 3.32543907026472E-06 , 1.91806888635848E-07 , 0.000189530803868 , 4.70828244038268E-07 , 1.36142119540258E-05 , 1.16002508639829E-06 , 1.16002508639829E-06])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Pi0 Distro NC fourth energy bin
	g = hf.create_group('sgpi0_nc_3')
	nbins = 50
	start = 0.
	end = 200.
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([0.014534540310721, 0.005818335053993, 0.003168682335051, 0.00155528535218, 0.000911889886084, 0.000686987328706, 0.000625801506754, 0.000455411175154, 0.000488932864917 , 0.000452530032733 , 0.000445063862239 , 0.000455821967251 , 0.000466153055573 , 0.000455703904475 , 0.00046127033006 , 0.000488425364006 , 0.000708371938348 , 0.000669552493304 , 0.000898043759372 , 0.000658815244328 , 0.000933193717053 , 0.000751526359958 , 0.00136823887343 , 0.00132077199242 , 0.001648423414053 , 0.002404271962488 , 0.002507357212272 , 0.002735078968756 , 0.002969352237251 , 0.00251880343932 , 0.003403970204769 , 0.003873075030757 , 0.0033994435157 , 0.002686881735584 , 0.002462876175453 , 0.00274458795356 , 0.002386352559917 , 0.00267721859361 , 0.002281673291072 , 0.001608212100416 , 0.00205918493706 , 0.001822233449562 , 0.00116138471607 , 0.001153446100382 , 0.001112341083472 , 0.001147875487717 , 0.000655021545409 , 0.000694911464992 , 0.000683153613961 , 0.000683492271513])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Pi0 Distro CC fourth energy bin
	g = hf.create_group('sgpi0_cc_3')
	nbins = 50
	start = 0.
	end = 200.
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([0.046770694332576, 0.017047396252947, 0.007765569635137, 0.003779264265351, 0.002520007646863, 0.001559132675346, 0.00143595045462, 0.000558825500202, 0.000941618680099 , 0.000342818145329 , 0.000633542911412 , 0.000634825224705 , 0.000636187682579 , 0.000699582046011 , 0.000341912410933 , 0.000348117898517 , 0.000489773580241 , 0.000952919065995 , 0.000892009184569 , 0.00089305106412 , 0.001204973772686 , 0.00077147173501 , 0.000772914337465 , 0.000773956217015 , 0.000775078241147 , 0.000731318875716 , 0.000777723012314 , 0.000779085470188 , 0.00071793515502 , 0.000719217468313 , 0.000720339492444 , 0.000721701950318 , 0.000723064408192 , 0.000724266576905 , 0.000229792750432 , 0.000238490235889 , 0.000227705620609 , 0.00018403415349 , 0.000241665954308 , 0.000226968776285 , 0.000225365883511 , 0.000196336354338 , 0.000149183662115 , 0.000147067252945 , 0.000113543677136 , 0.000103206279789 , 0.000113772172876 , 9.83499489217166E-05 , 0.000114986906133 , 0.000140147666825])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Pi0 Distro NC fifth energy bin
	g = hf.create_group('sgpi0_nc_4')
	nbins = 50
	start = 0.
	end = 200.
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([0.008505567673057, 0.00443129692156, 0.001842633570909, 0.000855307934232, 0.000581377016799, 0.000258857938386, 0.000354008979871, 0.000394392699243, 9.81276279005683E-05 , 0.000236730508705 , 0.000279651849254 , 0.000221469344072 , 0.000225759402931 , 0.000189604596653 , 0.00024965330819 , 0.000254820106888 , 0.00018181488856 , 0.000255884886514 , 0.000130125534031 , 0.000397850411264 , 0.000298600507046 , 0.000263916191757 , 0.000585023769458 , 0.000386184934882 , 0.000541336345314 , 0.000633380362532 , 0.000554414525997 , 0.000863813593235 , 0.000972175784795 , 0.000949272259727 , 0.001052553786396 , 0.0013052888338 , 0.001580043943207 , 0.001729749227753 , 0.001276794308954 , 0.001489655820318 , 0.001463745880613 , 0.001339441935311 , 0.00145639723368 , 0.000980180974609 , 0.001303490407756 , 0.000788762476332 , 0.000863255301476 , 0.000880039420662 , 0.000686266848659 , 0.000524529746509 , 0.000654134723463 , 0.000550855105682 , 0.000445506452015 , 0.000519869437936])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Pi0 Distro CC fifth energy bin
	g = hf.create_group('sgpi0_cc_4')
	nbins = 50
	start = 0.
	end = 200.
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([0.026833015727242, 0.014499357092012, 0.004372492841113, 0.001635882447201, 0.000851177392849, 0.000502067443866, 0.000234598510533, 0.000289271544067, 0.000260593427519 , 0.000261071882545 , 0.000260901053458 , 0.000207343261742 , 0.000205576746364 , 0.000128173021113 , 6.82110443108036E-05 , 0.000116518564227 , 2.13057112960005E-05 , 6.81682563746268E-05 , 2.04605986783499E-06 , 0.000113034088637 , 0.00016395841091 , 1.52096455268078E-05 , 0.000131065025741 , 0.000132405241823 , 0.000131531477682 , 0.000484164499123 , 0.000129443328875 , 0.000129034060176 , 0.000132885856578 , 0.000133191282836 , 0.000199859065609 , 0.000217450186699 , 0.00027150793218 , 0.000263491679323 , 0.00026124724628 , 0.000324977824547 , 0.000258727082393 , 0.000298253867684 , 0.000269168524138 , 0.000261226204509 , 0.000326226173403 , 0.000261202340309 , 0.000252966136046 , 0.000262483863669 , 0.000261071434462 , 0.000261069957142 , 0.000261079684635 , 0.000263551080822 , 0.000271036392421 , 0.000259004852593])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)


	# SubGeV e-like angular distribution
	g = hf.create_group('ang_sge')
	nbins = 50
	start = 0.1
	end = 10
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.exp(-np.square(np.log(values)-0.794) / 1.4) / values
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# SubGeV mu-like angular distribution
	g = hf.create_group('ang_sgm')
	nbins = 50
	start = 0.1
	end = 10
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.exp(-np.square(np.log(values)-0.393) / 1.286) / values
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# MultiGeV e-like angular distribution
	g = hf.create_group('ang_mge')
	nbins = 50
	start = 0.1
	end = 10
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.exp(-np.square(values+1.685) / 2.963) * values
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# MultiGeV mu-like angular distribution
	g = hf.create_group('ang_mgm')
	nbins = 50
	start = 0.1
	end = 10
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.exp(-np.square(values-0.385) / 0.768) * values
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# PC angular distribution
	g = hf.create_group('ang_pc')
	nbins = 50
	start = 0.1
	end = 10
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.exp(-values*3.33) * values * values
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# UpMu-Stop angular distribution
	g = hf.create_group('ang_upmustop')
	nbins = 50
	start = 0.1
	end = 10
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.exp(-values*0.88) * values
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# UpMu Thru angular distribution
	g = hf.create_group('ang_upmuthru')
	nbins = 50
	start = 0.1
	end = 10
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.exp(-values*3.33) * values * values
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Decay-e MultiGeV e-like CC nue
	g = hf.create_group('mge_muedk_ccnue')
	start = 0
	end = 10
	step = 1
	values = np.arange(start, end, step, 'int32')
	weights = np.array([315, 94, 15, 6, 0, 0, 0, 0, 0, 0])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Decay-e MultiGeV e-like CC nuebar
	g = hf.create_group('mge_muedk_ccnuebar')
	start = 0
	end = 10
	step = 1
	values = np.arange(start, end, step, 'int32')
	weights = np.array([206, 16, 4, 1, 0, 0, 0, 0, 0, 0])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Decay-e MultiGeV e-like CC numu
	g = hf.create_group('mge_muedk_ccnumus')
	start = 0
	end = 10
	step = 1
	values = np.arange(start, end, step, 'int32')
	weights = np.array([8, 12, 7, 4, 1, 0, 0, 0, 0, 0])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Decay-e MultiGeV e-like NC
	g = hf.create_group('mge_muedk_nc')
	start = 0
	end = 10
	step = 1
	values = np.arange(start, end, step, 'int32')
	weights = np.array([39, 17, 9, 5, 1, 0, 0, 0, 0, 0])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Decay-e SubGeV e-like CC nu
	g = hf.create_group('sge_muedk_ccnu')
	start = 0
	end = 5
	step = 1
	values = np.arange(start, end, step, 'int32')
	weights = np.array([465, 72, 1, 0, 0])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Decay-e SubGeV e-like CC nub
	g = hf.create_group('sge_muedk_ccnub')
	start = 0
	end = 5
	step = 1
	values = np.arange(start, end, step, 'int32')
	weights = np.array([153, 4, 1, 0, 0])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Decay-e SubGeV e-like NC
	g = hf.create_group('sge_muedk_nc')
	start = 0
	end = 5
	step = 1
	values = np.arange(start, end, step, 'int32')
	weights = np.array([22, 5, 3, 0, 0])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Decay-e SubGeV e-like CC nu, meson-subtracted
	g = hf.create_group('sge_muedk_ccnu_meson')
	start = 0
	end = 5
	step = 1
	values = np.arange(start, end, step, 'int32')
	weights = np.array([44.2, 72, 1, 0, 0])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Decay-e SubGeV e-like CC nub, meson-subtracted
	g = hf.create_group('sge_muedk_ccnub_meson')
	start = 0
	end = 5
	step = 1
	values = np.arange(start, end, step, 'int32')
	weights = np.array([24.5, 4, 1, 0, 0])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Decay-e SubGeV e-like NC, meson-subtracted
	g = hf.create_group('sge_muedk_nc_meson')
	start = 0
	end = 5
	step = 1
	values = np.arange(start, end, step, 'int32')
	weights = np.array([5, 5, 3, 0, 0])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Decay-e SubGeV mu-like CC nu
	g = hf.create_group('sgmu_muedk_ccnu')
	start = 0
	end = 5
	step = 1
	values = np.arange(start, end, step, 'int32')
	weights = np.array([93, 473, 58, 2, 0])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Decay-e SubGeV mu-like CC nub
	g = hf.create_group('sgm_muedk_ccnub')
	start = 0
	end = 5
	step = 1
	values = np.arange(start, end, step, 'int32')
	weights = np.array([12, 205, 4, 0, 0])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Decay-e SubGeV mu-like NC
	g = hf.create_group('sgm_muedk_nc')
	start = 0
	end = 5
	step = 1
	values = np.arange(start, end, step, 'int32')
	weights = np.array([21, 16, 4, 0, 0])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Decay-e SubGeV mu-like CC nu, meson-subtracted
	g = hf.create_group('sgm_muedk_ccnu_meson')
	start = 0
	end = 5
	step = 1
	values = np.arange(start, end, step, 'int32')
	weights = np.array([10.3, 69, 58, 2, 0])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Decay-e SubGeV mu-like CC nub, meson-subtracted
	g = hf.create_group('sgm_muedk_ccnub_meson')
	start = 0
	end = 5
	step = 1
	values = np.arange(start, end, step, 'int32')
	weights = np.array([4.4, 21.8, 4, 0, 0])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# Decay-e SubGeV mu-like NC, meson-subtracted
	g = hf.create_group('sgm_muedk_nc_meson')
	start = 0
	end = 5
	step = 1
	values = np.arange(start, end, step, 'int32')
	weights = np.array([5, 16, 4, 0, 0])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# MultiRing e-like nu-nubar LH, CCnue
	g = hf.create_group('mre_nunubar_ccnue')
	nbins = 20
	start = -0.5
	end = 0.5
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([1,4,8,8,14 ,16 ,44 ,134,422,642,545,318,323,80 ,21 ,8,4,0,0,0])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# MultiRing e-like nu-nubar LH, CCnuebar
	g = hf.create_group('mre_nunubar_ccnuebar')
	nbins = 20
	start = -0.5
	end = 0.5
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([0,1,4,2,10,7,31,111,429,786,538,230,218,45,23,4,2,1,1,0])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# MultiRing e-like nu-nubar LH, NC
	g = hf.create_group('mre_nunubar_nc')
	nbins = 20
	start = -0.5
	end = 0.5
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([3,5,20,23,34,40,76,196,447,512,474,268,272,46,10,4,2,1,0,0])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# MultiRing e-like Other LH, CC
	g = hf.create_group('other_cc')
	nbins = 17
	start = -9.75
	end = 6.25
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([0,0,0,1,4,8,18,37,69,114,165,275,289,198,78,4,0])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)

	# MultiRing e-like Other LH, NC
	g = hf.create_group('other_nc')
	nbins = 17
	start = -9.75
	end = 6.25
	step = (end-start)/(nbins)
	start = start + step/2
	end = end + step/2
	values = np.arange(start, end, step, 'float64')
	weights = np.array([0,6,16,21,32,51,76,107,120,111,102,100,60,28,10,1,0])
	weights = weights / np.sum(weights)
	g.create_dataset('values', data=values)
	g.create_dataset('weights', data=weights)
	
