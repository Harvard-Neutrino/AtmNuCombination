import numpy as np
from scipy import interpolate
from matplotlib import pyplot as plt

class results:
	def __init__(self):
		self.x = []
		self.y = []
		self.label = []
		self.line = ['--b','--c','--r','--g','--m','--y']
		self.contour = True


	def SK2017_theta23_dm31(self):
		self.x.append([0.4,0.404210526315789,0.412631578947368,0.427368421052632,0.443684210526316,0.455789473684211,0.472631578947368,0.484210526315789,0.509473684210526,0.528421052631579,0.537894736842105,0.548421052631579,0.56,0.572105263157895,0.583157894736842,0.592105263157895,0.601578947368421,0.609473684210526,0.616842105263158,0.62578947368421,0.636315789473684,0.638947368421053,0.638947368421053,0.643157894736842,0.646315789473684,0.646315789473684,0.644736842105263,0.642105263157895,0.638947368421053,0.636315789473684,0.631578947368421,0.624736842105263,0.617894736842105,0.608947368421053,0.594210526315789,0.582631578947368,0.568947368421053,0.556842105263158,0.542631578947368,0.531052631578947,0.516842105263158,0.505789473684211,0.490526315789474,0.477894736842105,0.462105263157895,0.451052631578947,0.438421052631579,0.424736842105263,0.414210526315789,0.405789473684211,0.405789473684211,0.402631578947368])
		self.y.append([0.002485749488562,0.002596220011159,0.002675818300167,0.002746652408406,0.002799836107495,0.002830888506602,0.002853159289567,0.002857704110099,0.002884484842849,0.002902361911847,0.002924551329738,0.002937918448949,0.002964548075135,0.002986766551981,0.003017807327506,0.003031157011345,0.003031261623582,0.003031348800446,0.003004928398735,0.002965274549005,0.002885885484471,0.002788741398549,0.002788741398549,0.002704865631393,0.002616561279524,0.002550306862563,0.00248845197136,0.002435419378836,0.002404465780175,0.002351433187651,0.00227629254231,0.002240881299981,0.002209887018784,0.002183286451553,0.002156621954622,0.002134409289567,0.002129841221871,0.00213412451181,0.002133967593454,0.002129422772922,0.002129265854566,0.002124726845825,0.002120141342756,0.002115584898642,0.002115410544914,0.002119705458434,0.002123982936582,0.002163584480193,0.002207637855682,0.00229146712851,0.002362138506602,0.00244160893621])
		self.label.append('SuperK 2017')

	def SK2020_theta23_dm31(self):
		self.x.append([0.386030150753769,0.390854271356784,0.396884422110553,0.402914572864322,0.4121608040201,0.416984924623116,0.429045226130653,0.439095477386935,0.449949748743719,0.461608040201005,0.475678391959799,0.495376884422111,0.511055276381909,0.527537688442211,0.544824120603015,0.558894472361809,0.568140703517588,0.576180904522613,0.583819095477387,0.587437185929648,0.583819095477387,0.579396984924623,0.574170854271357,0.568140703517588,0.560904522613065,0.55286432160804,0.542010050251256,0.528743718592965,0.519899497487437,0.522713567839196,0.520301507537688,0.510251256281407,0.497788944723618,0.485326633165829,0.472462311557789,0.459597989949749,0.446331658291457,0.435075376884422,0.419798994974874,0.409748743718593,0.402914572864322,0.396482412060301,0.396482412060301,0.397688442211055,0.397688442211055,0.394472361809045,0.392060301507538,0.390050251256281,0.388040201005025])
		self.y.append([0.002399570852694,0.002486669611795,0.002576116059102,0.002651433777995,0.002717313411642,0.002750252045155,0.002771374139142,0.002787798490096,0.002778315439048,0.002764118078619,0.002738132578118,0.002697985216506,0.002660216309175,0.00262715224474,0.002591728658994,0.002565743158493,0.002542140845515,0.002509126480124,0.002450211812595,0.002396030387416,0.002372503806316,0.002348981958458,0.002327819631912,0.002304307250538,0.002285511545167,0.002266720573038,0.00224088180305,0.00221270244472,0.002186851841626,0.002125610785482,0.002102077104518,0.002083297965495,0.002071597390406,0.00205047766304,0.002034069878435,0.002017662093829,0.00201067582812,0.002010742093513,0.002024960753532,0.002048567799752,0.002069801124934,0.002105160811909,0.002123999116461,0.002180506930256,0.002204054810946,0.002241750353021,0.002270022009577,0.002305355663719,0.002359527622413])
		self.label.append('SuperK 2020')

	def IC2020_theta23_dm31(self):
		self.x.append([0.384736842105263,0.388947368421053,0.398947368421053,0.41,0.421052631578947,0.435263157894737,0.447368421052632,0.464736842105263,0.482105263157895,0.5,0.51578947368421,0.53578947368421,0.554736842105263,0.574736842105263,0.593157894736842,0.606315789473684,0.619473684210526,0.631052631578947,0.641578947368421,0.647894736842105,0.649473684210526,0.648421052631579,0.640526315789474,0.63,0.618947368421053,0.606842105263158,0.59578947368421,0.583684210526316,0.575263157894737,0.563157894736842,0.544210526315789,0.53,0.512105263157895,0.492631578947368,0.470526315789474,0.450526315789474,0.431578947368421,0.416842105263158,0.406842105263158,0.395263157894737,0.39,0.385263157894737])
		self.y.append([0.00239724172401,0.002498878324344,0.002551992281942,0.00260070090199,0.002614073832992,0.002631898595871,0.002632032267063,0.002641057978427,0.00265008368979,0.002650281290683,0.002650455644411,0.002655093453599,0.002659719639204,0.002659940487261,0.002651309977683,0.002638204389065,0.002611847917054,0.002585474009671,0.002541420634183,0.002492903803236,0.00243991770504,0.002386902547889,0.002338228798587,0.002289525990329,0.002262902175935,0.002245100660219,0.002222893806956,0.002209509252371,0.002200582341454,0.002191614748001,0.002182571601265,0.002173580760647,0.002182217082016,0.002173168123489,0.002172924028269,0.002185954063604,0.00218574483913,0.002212083875767,0.002229641296262,0.002264849125907,0.002304543658174,0.002353077924493])
		self.label.append('IceCube 2020')

	def T2K2020_theta23_dm31(self):
		self.x.append([0.442480211081794,0.444591029023747,0.450395778364116,0.458311345646438,0.466754617414248,0.476781002638522,0.488918205804749,0.508970976253298,0.522163588390501,0.537467018469657,0.559630606860158,0.573878627968338,0.587071240105541,0.597097625329815,0.600263852242744,0.593931398416887,0.587598944591029,0.580211081794195,0.57335092348285,0.560158311345646,0.546965699208443,0.531662269129288,0.511609498680739,0.492612137203166,0.473614775725594,0.455672823218997,0.446701846965699])
		self.y.append([0.002572932962851,0.002608354542695,0.002626117869568,0.002639479767436,0.002643997945221,0.002644108856562,0.002644243117659,0.002644464940341,0.002644610876316,0.002658054498331,0.002675998785813,0.002676156396666,0.002663027996357,0.002623315898849,0.002579103135872,0.00252151096271,0.002499317019637,0.002485960959208,0.002472610736218,0.002454765685199,0.002463469306746,0.002463300021015,0.002463078198333,0.002471717608051,0.002480357017769,0.00250670721741,0.002528731874752])
		self.label.append('T2K 2020')

	def NOvA2020_theta23_dm31(self):
		self.x.append([0.414511873350923,0.41820580474934,0.42401055408971,0.433509234828496,0.446701846965699,0.45778364116095,0.468865435356201,0.482585751978892,0.498416886543536,0.516358839050132,0.530079155672823,0.542744063324538,0.554353562005277,0.565435356200528,0.576517150395778,0.589182058047493,0.603430079155673,0.60976253298153,0.613984168865435,0.613456464379947,0.610290237467019,0.600791556728232,0.589709762532982,0.579683377308707,0.566490765171504,0.552242744063325,0.541688654353562,0.528496042216359,0.504749340369393,0.486807387862797,0.473614775725594,0.460949868073879,0.448812664907652,0.431926121372032,0.421899736147757,0.416622691292876])
		self.y.append([0.002532800569734,0.002568239661896,0.00259042776753,0.002590532841432,0.002590678777407,0.00256867746982,0.002555525719756,0.002546827935648,0.002529303943774,0.0025295024167,0.002538503747636,0.002551918182455,0.002556471384874,0.002574293086137,0.002587690008639,0.002601104443459,0.00259683727555,0.002592482546057,0.002557131015481,0.002517302169192,0.002486293693231,0.00245079038924,0.002415269572933,0.002393034767787,0.002375189716767,0.00235733299087,0.00235721624209,0.002357070306115,0.002352382842599,0.002361033927195,0.002360887991221,0.002369597450207,0.002382737525393,0.002417948957433,0.00244881149742,0.002484151353118])
		self.label.append('NOvA 2020')

	def MINOS2020_theta23_dm31(self):
		self.x.append([0.352242744063325,0.362269129287599,0.371240105540897,0.384960422163588,0.405540897097625,0.428232189973615,0.446701846965699,0.475725593667546,0.500527704485488,0.516358839050132,0.536411609498681,0.555936675461741,0.572295514511873,0.587071240105541,0.605540897097625,0.62401055408971,0.638258575197889,0.650923482849604,0.661477572559367,0.665171503957784,0.660422163588391,0.648812664907652,0.637730870712401,0.62401055408971,0.609234828496042,0.592348284960422,0.570712401055409,0.552242744063325,0.539050131926121,0.52532981530343,0.506332453825858,0.495778364116095,0.478891820580475,0.463588390501319,0.448812664907652,0.430870712401055,0.413456464379947,0.397097625329815,0.382849604221636,0.370712401055409,0.360686015831135,0.352770448548813,0.35065963060686])
		self.y.append([0.002633881663437,0.002656116468583,0.002669490041329,0.002651942699699,0.002634471244776,0.002603748803325,0.002581829219885,0.002560026385224,0.002547026408574,0.002547201531744,0.002551848133187,0.002560913675952,0.002574368972844,0.002596656314942,0.002623409297873,0.00263246316576,0.002645895112896,0.002641610432671,0.002628452845168,0.00258424591963,0.002526671258785,0.002486719826278,0.002442349452448,0.002406799448946,0.002380087328087,0.002353351857473,0.002344262964952,0.002330784318304,0.002321788824807,0.002321637051393,0.002308152567306,0.002321310154809,0.002321123356761,0.002329803628552,0.00232964018026,0.002347140822378,0.002360222523175,0.002399864571415,0.00243068041189,0.002474793938403,0.002518930814673,0.002554241483177,0.002598465921031])
		self.label.append('MINOS+ 2020')

	def NOvA2020_dcp_IO(self):
		self.contour = False
		self.x.append([0.2891863504531,0.14217912682035,0.413751248213036,0.530174975830684,0.677515171657393,0.839589387066773,1.03113164164149,1.29634399412957,1.62049242494833,1.90043879701908,2.10671507117647,2.28352330616852,2.4455975215779,2.59293771740461,2.74027791323132,2.9023521286407,3.06442634405008,3.2559685986248,3.43277683361685,3.63905310777425,3.84666883825733,4.15474379316773,4.47889222398649,4.80304065480525,5.03922893105326,5.28784816920906,5.47196514385851,5.76075192767886,6.07284525156634,6.22732921446343])
		self.y.append([5.64299028092132,4.45247895678931,6.46172280655041,7.15257622154174,8.06377313273865,9.01555496383083,9.93105350248208,10.7395214291766,10.8894833032764,10.2641958460924,9.41485820796166,8.51151644255093,7.60031953135402,6.74410864066036,5.90360804153908,5.01597656770071,4.20689655172414,3.32057426885014,2.43687036790486,1.57444082013048,0.88958416544623,0.418537659916971,0.37734554975934,0.511472063196194,0.83234465993084,0.929303687924339,1.09625882039676,1.81893223272535,2.70227908158943,3.47113122975192])
		self.label.append('NOvA 2020, IO')

	def NOvA2020_dcp_NO(self):
		# self.contour = False
		self.x.append([0.161078115279876,0.485917307696596,0.810181807893729,1.1352904783844,1.4488019931011,1.77496112530567,2.11149230303676,2.43665230448247,2.77392451765291,3.08649158471051,3.42085027970773,3.74768993442132,4.02861364267401,4.35227653531776,4.67673476701256,5.00231583030882,5.31365252714982,5.62555197649585,5.99183345750474,6.21910793636872])
		self.y.append([0,0.078173712309315,0.531448441530614,0.529263533886372,0.405774676936986,0.235477286429372,0.050176721001492,0.020296953302534,0.099596055550713,0.21990424397233,0.54232029578742,1.26724440539745,2.18210718790408,2.95997040346909,3.3087201591751,3.05166267743315,2.50697014889853,1.65865280254773,0.703546223064862,0.333203953250923])
		self.label.append('NOvA 2020, NO')

	def T2K2020_dcp_IO(self):
		pass
		# self.contour = False
		self.x.append([])
		self.y.append([])
		self.label.append('T2K 2020, IO')

	def T2K2020_dcp_NO(self):
		self.contour = False
		self.x.append([0.075786913417991,0.192350869045088,0.308859685620327,0.425221464723945,0.541620003195469,0.658092060402804,0.774692775397808,0.905978857870901,1.06683785182365,1.31658099737096,1.6418546186811,1.87994036613748,2.02935984479816,2.16412336347508,2.28416107936921,2.40421717494729,2.52436516894513,2.64451316294298,2.76460601788897,2.88466211346705,3.00455279188956,3.13927587526178,3.28875049297432,3.45286391629894,3.67615665445141,4.00861654653363,4.38753211089948,4.72550590816747,5.03663571288931,5.36049242765475,5.63966645985117,5.8449307702333,6.00592944978409,6.13746182002214,6.22509615310792])
		self.y.append([6.08771140894343,6.98113135515909,7.904300763928,8.90680207283891,9.88947040671431,10.8324727905187,11.7060597616989,12.6293461791701,13.5429501265281,14.3382582758867,14.2470765853507,13.3589890448123,12.4716418502447,11.5187288293577,10.5379326347187,9.54721995256189,8.50692483281638,7.46662971307087,6.45608405587859,5.46537137372183,4.56390707922481,3.63281033087681,2.71571367375594,1.87343823130439,0.993727804705202,0.214488850458913,0.000,0.028002980967465,0.480821931144796,1.15411127834081,2.01636436113249,2.8906533845263,3.72889202674938,4.51929751148272,5.07532286469034])
		self.label.append('T2K 2020, NO')



	def plot(self, ax):	# plot the result
		# append the starting x,y coordinates
		for i,(x,y) in enumerate(zip(self.x,self.y)):
			if self.contour:
				x = np.r_[x, x[0]]
				y = np.r_[y, y[0]]
			ax.plot(x, y, self.line[i], label=self.label[i], alpha=0.4)
		ax.legend(loc='upper left')
		plt.show()


#cont = results()

#cont.SK2017_theta23_dm31()
#cont.SK2020_theta23_dm31()
#cont.IC2020_theta23_dm31()
#cont.T2K2020_theta23_dm31()
#cont.NOvA2020_theta23_dm31()
#cont.MINOS2020_theta23_dm31()
#fig, ax = plt.subplots(1, 1)
#cont.plot(ax)

#cont = results()
#cont.NOvA2020_dcp_IO()
#cont.NOvA2020_dcp_NO()
#cont.T2K2020_dcp_NO()
#fig, ax = plt.subplots(1, 1)
#cont.plot(ax)
