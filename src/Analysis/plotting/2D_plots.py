import numpy as np
import pandas as pd
import sys
import matplotlib.pyplot as plt
from matplotlib.ticker import NullFormatter
from matplotlib.gridspec import GridSpec
import math
from scipy.interpolate import make_interp_spline
from scipy import interpolate
from OfficialContours.Results import results
from scipy.interpolate import griddata
from scipy.ndimage import zoom
from mpl_toolkits.mplot3d import axes3d

def Th23vDm231(filename):
	df = pd.read_csv(filename, sep=' ')
	rawchi2 = np.array(df["X2"])
	rawth23 = np.array(df["Sin2Theta23"])
	rawdm231 = np.array(df["Dm231"])
	rawOrdering = np.array(df["Ordering"])

	chi2 = rawchi2[rawOrdering=='normal']
	th23 = np.unique(rawth23[rawOrdering=='normal'])
	dm231 = np.unique(rawdm231[rawOrdering=='normal'])

	print(chi2.size)
	print(th23.size)
	print(dm231.size)
	Chi2 = np.reshape(chi2, (th23.size,dm231.size)).T
	
	f = plt.figure()
	gs = GridSpec(1, 1)

	ax = plt.subplot(gs[0])

	ax.set_xlabel(r'$\sin^2\theta_{23}$')
	ax.set_ylabel(r'$\Delta m^2_{31}$')
	ax.set_xlim(0.25,0.7)
	ax.set_ylim(1.8e-3,3.1e-3)

	label = []
	x=[]
	y=[]
	# def SK2020_theta23_dm31(self):
	x.append([0.386030150753769,0.390854271356784,0.396884422110553,0.402914572864322,0.4121608040201,0.416984924623116,0.429045226130653,0.439095477386935,0.449949748743719,0.461608040201005,0.475678391959799,0.495376884422111,0.511055276381909,0.527537688442211,0.544824120603015,0.558894472361809,0.568140703517588,0.576180904522613,0.583819095477387,0.587437185929648,0.583819095477387,0.579396984924623,0.574170854271357,0.568140703517588,0.560904522613065,0.55286432160804,0.542010050251256,0.528743718592965,0.519899497487437,0.522713567839196,0.520301507537688,0.510251256281407,0.497788944723618,0.485326633165829,0.472462311557789,0.459597989949749,0.446331658291457,0.435075376884422,0.419798994974874,0.409748743718593,0.402914572864322,0.396482412060301,0.396482412060301,0.397688442211055,0.397688442211055,0.394472361809045,0.392060301507538,0.390050251256281,0.388040201005025])
	y.append([0.002399570852694,0.002486669611795,0.002576116059102,0.002651433777995,0.002717313411642,0.002750252045155,0.002771374139142,0.002787798490096,0.002778315439048,0.002764118078619,0.002738132578118,0.002697985216506,0.002660216309175,0.00262715224474,0.002591728658994,0.002565743158493,0.002542140845515,0.002509126480124,0.002450211812595,0.002396030387416,0.002372503806316,0.002348981958458,0.002327819631912,0.002304307250538,0.002285511545167,0.002266720573038,0.00224088180305,0.00221270244472,0.002186851841626,0.002125610785482,0.002102077104518,0.002083297965495,0.002071597390406,0.00205047766304,0.002034069878435,0.002017662093829,0.00201067582812,0.002010742093513,0.002024960753532,0.002048567799752,0.002069801124934,0.002105160811909,0.002123999116461,0.002180506930256,0.002204054810946,0.002241750353021,0.002270022009577,0.002305355663719,0.002359527622413])
	label.append('SuperK 2020')

	# def IC2020_theta23_dm31(self):
	x.append([0.384736842105263,0.388947368421053,0.398947368421053,0.41,0.421052631578947,0.435263157894737,0.447368421052632,0.464736842105263,0.482105263157895,0.5,0.51578947368421,0.53578947368421,0.554736842105263,0.574736842105263,0.593157894736842,0.606315789473684,0.619473684210526,0.631052631578947,0.641578947368421,0.647894736842105,0.649473684210526,0.648421052631579,0.640526315789474,0.63,0.618947368421053,0.606842105263158,0.59578947368421,0.583684210526316,0.575263157894737,0.563157894736842,0.544210526315789,0.53,0.512105263157895,0.492631578947368,0.470526315789474,0.450526315789474,0.431578947368421,0.416842105263158,0.406842105263158,0.395263157894737,0.39,0.385263157894737])
	y.append([0.00239724172401,0.002498878324344,0.002551992281942,0.00260070090199,0.002614073832992,0.002631898595871,0.002632032267063,0.002641057978427,0.00265008368979,0.002650281290683,0.002650455644411,0.002655093453599,0.002659719639204,0.002659940487261,0.002651309977683,0.002638204389065,0.002611847917054,0.002585474009671,0.002541420634183,0.002492903803236,0.00243991770504,0.002386902547889,0.002338228798587,0.002289525990329,0.002262902175935,0.002245100660219,0.002222893806956,0.002209509252371,0.002200582341454,0.002191614748001,0.002182571601265,0.002173580760647,0.002182217082016,0.002173168123489,0.002172924028269,0.002185954063604,0.00218574483913,0.002212083875767,0.002229641296262,0.002264849125907,0.002304543658174,0.002353077924493])
	label.append('IceCube 2020')

	# def T2K2020_theta23_dm31(self):
	x.append([0.442480211081794,0.444591029023747,0.450395778364116,0.458311345646438,0.466754617414248,0.476781002638522,0.488918205804749,0.508970976253298,0.522163588390501,0.537467018469657,0.559630606860158,0.573878627968338,0.587071240105541,0.597097625329815,0.600263852242744,0.593931398416887,0.587598944591029,0.580211081794195,0.57335092348285,0.560158311345646,0.546965699208443,0.531662269129288,0.511609498680739,0.492612137203166,0.473614775725594,0.455672823218997,0.446701846965699])
	y.append([0.002572932962851,0.002608354542695,0.002626117869568,0.002639479767436,0.002643997945221,0.002644108856562,0.002644243117659,0.002644464940341,0.002644610876316,0.002658054498331,0.002675998785813,0.002676156396666,0.002663027996357,0.002623315898849,0.002579103135872,0.00252151096271,0.002499317019637,0.002485960959208,0.002472610736218,0.002454765685199,0.002463469306746,0.002463300021015,0.002463078198333,0.002471717608051,0.002480357017769,0.00250670721741,0.002528731874752])
	label.append('T2K 2020')

	# def NOvA2020_theta23_dm31(self):
	x.append([0.414511873350923,0.41820580474934,0.42401055408971,0.433509234828496,0.446701846965699,0.45778364116095,0.468865435356201,0.482585751978892,0.498416886543536,0.516358839050132,0.530079155672823,0.542744063324538,0.554353562005277,0.565435356200528,0.576517150395778,0.589182058047493,0.603430079155673,0.60976253298153,0.613984168865435,0.613456464379947,0.610290237467019,0.600791556728232,0.589709762532982,0.579683377308707,0.566490765171504,0.552242744063325,0.541688654353562,0.528496042216359,0.504749340369393,0.486807387862797,0.473614775725594,0.460949868073879,0.448812664907652,0.431926121372032,0.421899736147757,0.416622691292876])
	y.append([0.002532800569734,0.002568239661896,0.00259042776753,0.002590532841432,0.002590678777407,0.00256867746982,0.002555525719756,0.002546827935648,0.002529303943774,0.0025295024167,0.002538503747636,0.002551918182455,0.002556471384874,0.002574293086137,0.002587690008639,0.002601104443459,0.00259683727555,0.002592482546057,0.002557131015481,0.002517302169192,0.002486293693231,0.00245079038924,0.002415269572933,0.002393034767787,0.002375189716767,0.00235733299087,0.00235721624209,0.002357070306115,0.002352382842599,0.002361033927195,0.002360887991221,0.002369597450207,0.002382737525393,0.002417948957433,0.00244881149742,0.002484151353118])
	label.append('NOvA 2020')

	# def MINOS2020_theta23_dm31(self):
	x.append([0.352242744063325,0.362269129287599,0.371240105540897,0.384960422163588,0.405540897097625,0.428232189973615,0.446701846965699,0.475725593667546,0.500527704485488,0.516358839050132,0.536411609498681,0.555936675461741,0.572295514511873,0.587071240105541,0.605540897097625,0.62401055408971,0.638258575197889,0.650923482849604,0.661477572559367,0.665171503957784,0.660422163588391,0.648812664907652,0.637730870712401,0.62401055408971,0.609234828496042,0.592348284960422,0.570712401055409,0.552242744063325,0.539050131926121,0.52532981530343,0.506332453825858,0.495778364116095,0.478891820580475,0.463588390501319,0.448812664907652,0.430870712401055,0.413456464379947,0.397097625329815,0.382849604221636,0.370712401055409,0.360686015831135,0.352770448548813,0.35065963060686])
	y.append([0.002633881663437,0.002656116468583,0.002669490041329,0.002651942699699,0.002634471244776,0.002603748803325,0.002581829219885,0.002560026385224,0.002547026408574,0.002547201531744,0.002551848133187,0.002560913675952,0.002574368972844,0.002596656314942,0.002623409297873,0.00263246316576,0.002645895112896,0.002641610432671,0.002628452845168,0.00258424591963,0.002526671258785,0.002486719826278,0.002442349452448,0.002406799448946,0.002380087328087,0.002353351857473,0.002344262964952,0.002330784318304,0.002321788824807,0.002321637051393,0.002308152567306,0.002321310154809,0.002321123356761,0.002329803628552,0.00232964018026,0.002347140822378,0.002360222523175,0.002399864571415,0.00243068041189,0.002474793938403,0.002518930814673,0.002554241483177,0.002598465921031])
	label.append('MINOS+ 2020')

	line = ['--b','--c','--r','--g','--m','--y']

	for i,(t,q) in enumerate(zip(x,y)):
		xx = np.r_[t, t[0]]
		yy = np.r_[q, q[0]]
		ax.plot(xx, yy, line[i], label=label[i])
	ax.legend(loc='upper left')


	colors = ['m','c','g','r','m']
	levels2d = np.array([4.61]) # 1, 90%, 2, 3 sigma

	X, Y = np.meshgrid(th23, dm231)

	pw = 10 #power of the smooth
	print(type(X))
	newX = zoom(X.astype('float64'), pw)
	newY = zoom(Y.astype('float64'), pw)
	newChi2 = zoom(Chi2.astype('float64'), pw)
	# dele = ax.contour(newX,newY,newChi2, levels=levels2d, colors=colors) #, label='SK2020 results from this work')
	dele = ax.contour(X,Y,Chi2, levels=levels2d, colors=colors, linewidth=3) #, label='SK2020 results from this work')
	h1,_ = dele.legend_elements()
	ax.legend([h1[0]], ['SK+SKGd(5yrs)+ICUp(5yrs), this work'])
	plt.show()



filename = str(sys.argv[1])
Th23vDm231(filename)